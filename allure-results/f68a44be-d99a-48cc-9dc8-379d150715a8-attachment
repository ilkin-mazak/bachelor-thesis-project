# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: E2E Checkout Flow >> Complete checkout as logged-in user
- Location: C:\Users\Ilkin Mazakoghlu\Desktop\final-project\tests\CheckoutFlow.spec.js:24:3

# Error details

```
Error: expect(locator).toHaveURL(expected)

Locator: locator(':root')
Expected pattern: /order-received/
Received string:  "http://mystore.local/checkout/"
Call log:
  - expect.toHaveURL with timeout 5000ms
  - waiting for locator(':root')
    4 × locator resolved to <html lang="en-US">…</html>
      - unexpected value "http://mystore.local/checkout/"

    at C:\Users\Ilkin Mazakoghlu\Desktop\final-project\tests\CheckoutFlow.spec.js:52:24
```

# Test source

```ts
   1 | import { test, expect } from "@playwright/test";
   2 | import LoginPage from "../page-objects/LoginPage.js";
   3 | import ShopPage from "../page-objects/ShopPage.js";
   4 | import CartPage from "../page-objects/CartPage.js";
   5 | import CheckoutPage from "../page-objects/CheckoutPage.js";
   6 | import config from "../config/site-config.json" assert { type: "json" };
   7 |
   8 | test.describe("E2E Checkout Flow", () => {
   9 |   test.beforeEach(async ({ page }) => {
  10 |     // 1. Login first
  11 |     const loginPage = new LoginPage(page);
  12 |     await loginPage.navigateToLogin();
  13 |     await loginPage.login(
  14 |       config.users.valid.username,
  15 |       config.users.valid.password
  16 |     );
  17 |
  18 |     // 2. Clear cart while authenticated
  19 |     const cartPage = new CartPage(page);
  20 |     await page.goto("/cart");
  21 |     await cartPage.emptyCart();
  22 |   });
  23 |
  24 |   test("Complete checkout as logged-in user", async ({ page }) => {
  25 |     const shopPage = new ShopPage(page);
  26 |     const cartPage = new CartPage(page);
  27 |     const checkoutPage = new CheckoutPage(page);
  28 |
  29 |     // 1. Add Product to Cart
  30 |     await shopPage.navigateToProduct(config.products.defaultProduct.slug);
  31 |     await shopPage.selectProductOptions(
  32 |       config.products.defaultProduct.options.size,
  33 |       config.products.defaultProduct.options.color
  34 |     );
  35 |     await shopPage.addToCart();
  36 |
  37 |     // 2. View and Verify Cart
  38 |     await shopPage.viewCart();
  39 |     await expect(page.locator(config.selectors.cart.cartTotal)).toContainText(
  40 |       config.products.defaultProduct.options.expectedPrice
  41 |     );
  42 |
  43 |     // 3. Proceed to Checkout
  44 |     await cartPage.proceedToCheckout();
  45 |
  46 |     // 4. Complete Checkout
  47 |     await checkoutPage.ensureBillingFormVisible();
  48 |     await checkoutPage.fillShippingDetails(config.testData.shippingDetails);
  49 |     await checkoutPage.placeOrder();
  50 |
  51 |     // 5. Final Assertions
> 52 |     await expect(page).toHaveURL(/order-received/);
     |                        ^ Error: expect(locator).toHaveURL(expected)
  53 |     await expect(
  54 |       page.getByRole("heading", { name: "Order received" })
  55 |     ).toBeVisible();
  56 |   });
  57 | });
  58 |
```