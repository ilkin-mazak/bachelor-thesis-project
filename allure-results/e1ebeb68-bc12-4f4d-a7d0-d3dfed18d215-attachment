# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: E2E Checkout Flow >> Complete checkout as logged-in user
- Location: C:\Users\Ilkin Mazakoghlu\Desktop\final-project\tests\CheckoutFlow.spec.js:28:3

# Error details

```
TimeoutError: page.waitForURL: Timeout 3000ms exceeded.
=========================== logs ===========================
waiting for navigation until "load"
  navigated to "http://mystore.local/cart/"
============================================================
    at ShopPage.viewCart (C:\Users\Ilkin Mazakoghlu\Desktop\final-project\page-objects\ShopPage.js:55:17)
    at C:\Users\Ilkin Mazakoghlu\Desktop\final-project\tests\CheckoutFlow.spec.js:42:5
```

# Page snapshot

```yaml
- banner:
  - paragraph:
    - link "mystore"
  - navigation:
    - list:
      - listitem:
        - link "Home"
      - listitem:
        - link "Shop"
      - listitem:
        - link "Cart"
      - listitem:
        - link "My account"
      - listitem:
        - link "Contact us"
- main:
  - heading "Cart" [level=1]
- contentinfo:
  - paragraph:
    - link "mystore"
  - paragraph:
    - text: Proudly powered by
    - link "WordPress"
```

# Test source

```ts
   1 | import config from "../config/site-config.json" assert { type: "json" };
   2 |
   3 | export default class ShopPage {
   4 |   constructor(page) {
   5 |     this.page = page;
   6 |     this.selectors = config.selectors; // Access full selector tree
   7 |   }
   8 |
   9 |   /**
  10 |    * Navigates to a specific product page
  11 |    * @param {string} productSlug - URL slug of the product
  12 |    */
  13 |   async navigateToProduct(productSlug) {
  14 |     await this.page.goto(`/product/${productSlug}`);
  15 |     await this.page.waitForLoadState("networkidle");
  16 |   }
  17 |
  18 |   /**
  19 |    * Selects product options (size and color)
  20 |    * @param {string} size - Product size to select
  21 |    * @param {string} color - Product color to select
  22 |    */
  23 |   async selectProductOptions(size, color) {
  24 |     await this.page
  25 |       .locator(this.selectors.product.sizeDropdown)
  26 |       .selectOption(size);
  27 |     await this.page
  28 |       .locator(this.selectors.product.colorDropdown)
  29 |       .selectOption(color);
  30 |     await this.page.waitForTimeout(500); // Allow options to settle
  31 |   }
  32 |
  33 |   /** Adds product to cart */
  34 |   async addToCart() {
  35 |     const addButton = this.page.locator(this.selectors.product.addToCartButton);
  36 |     await addButton.waitFor({ state: "visible" });
  37 |     await addButton.click();
  38 |     await this.page.waitForLoadState("networkidle");
  39 |   }
  40 |
  41 |   /** Navigates to cart with stability checks */
  42 |   async viewCart() {
  43 |     const viewCartButton = this.page.locator(
  44 |       this.selectors.product.viewCartButton
  45 |     );
  46 |
  47 |     // Wait for button to be fully interactive
  48 |     await viewCartButton.waitFor({
  49 |       state: "visible",
  50 |       timeout: 5000,
  51 |     });
  52 |
  53 |     // Atomic navigation handling
  54 |     await Promise.all([
> 55 |       this.page.waitForURL(/cart/, { timeout: 3000 }),
     |                 ^ TimeoutError: page.waitForURL: Timeout 3000ms exceeded.
  56 |       viewCartButton.click(),
  57 |     ]);
  58 |
  59 |     // Verify cart total visibility
  60 |     await this.page.waitForSelector(this.selectors.cart.cartTotal, {
  61 |       state: "visible",
  62 |       timeout: 15000,
  63 |     });
  64 |   }
  65 | }
  66 |
```