# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: E2E Checkout Flow >> Complete checkout as logged-in user
- Location: C:\Users\Ilkin Mazakoghlu\Desktop\final-project\tests\CheckoutFlow.spec.js:28:3

# Error details

```
Error: expect(locator).toContainText(expected)

Locator: locator('.wc-block-components-totals-footer-item-tax-value')
Expected string: "69,00 €"
Received: <element(s) not found>
Call log:
  - expect.toContainText with timeout 5000ms
  - waiting for locator('.wc-block-components-totals-footer-item-tax-value')

    at C:\Users\Ilkin Mazakoghlu\Desktop\final-project\tests\CheckoutFlow.spec.js:43:65
```

# Page snapshot

```yaml
- link "Skip to content"
- banner:
  - paragraph:
    - link "mystore"
  - navigation:
    - list:
      - listitem:
        - link "Home"
      - listitem:
        - link "Shop"
      - listitem:
        - link "Cart"
      - listitem:
        - link "My account"
      - listitem:
        - link "Contact us"
  - button "1 item in cart, total price of 69,00 €":
    - img
    - text: "1"
- main:
  - navigation "Breadcrumb":
    - link "Home"
    - text: /
    - link "Clothing"
    - text: /
    - link "Men"
    - text: /
    - link "Tops"
    - text: /
    - link "Hoodies & Sweatshirts"
    - text: / Abominable Hoodie
  - alert:
    - text: “Abominable Hoodie” has been added to your cart.
    - link "View cart"
  - button "View full-screen image gallery"
  - link "mh09-green_main-1.jpg":
    - img "mh09-green_main-1.jpg"
  - link "Abominable Hoodie - Image 2":
    - img "Abominable Hoodie - Image 2"
  - link "Abominable Hoodie - Image 3":
    - img "Abominable Hoodie - Image 3"
  - list:
    - listitem:
      - img "Abominable Hoodie"
    - listitem:
      - img "Abominable Hoodie - Image 2"
    - listitem:
      - img "Abominable Hoodie - Image 3"
  - heading "Abominable Hoodie" [level=1]
  - text: 69,00 €
  - paragraph: This is a variable product called a Abominable Hoodie
  - text: Size
  - combobox "Size":
    - option "Choose an option"
    - option "XS"
    - option "S" [selected]
    - option "M"
    - option "L"
    - option "XL"
  - text: Color
  - combobox "Color":
    - option "Choose an option"
    - option "Blue"
    - option "Green" [selected]
    - option "Red"
  - link "Clear options": Clear
  - alert
  - paragraph: It took CoolTech™ weather apparel know-how and lots of wind-resistant fabric to get the Abominable Hoodie just right. It’s aggressively warm when it needs to be, while maintaining your comfort in milder climes.
  - paragraph: • Blue heather hoodie. • Relaxed fit. • Moisture-wicking. • Machine wash/dry.
  - paragraph: 80 in stock
  - text: Abominable Hoodie quantity
  - spinbutton "Product quantity": "1"
  - button "Add to cart"
  - text: "SKU: MH09-S-Green Category:"
  - link "Hoodies & Sweatshirts"
  - tablist:
    - listitem:
      - tab "Description" [selected]
    - listitem:
      - tab "Additional information"
    - listitem:
      - tab "Reviews (0)"
  - tabpanel "Description":
    - paragraph: It took CoolTech™ weather apparel know-how and lots of wind-resistant fabric to get the Abominable Hoodie just right. It’s aggressively warm when it needs to be, while maintaining your comfort in milder climes.
    - paragraph: • Blue heather hoodie. • Relaxed fit. • Moisture-wicking. • Machine wash/dry.
- contentinfo:
  - paragraph:
    - link "mystore"
  - paragraph:
    - text: Proudly powered by
    - link "WordPress"
- status
```

# Test source

```ts
   1 | import { test, expect } from "@playwright/test";
   2 | import LoginPage from "../page-objects/LoginPage.js";
   3 | import ShopPage from "../page-objects/ShopPage.js";
   4 | import CartPage from "../page-objects/CartPage.js";
   5 | import CheckoutPage from "../page-objects/CheckoutPage.js";
   6 | import config from "../config/site-config.json" assert { type: "json" };
   7 |
   8 | test.describe("E2E Checkout Flow", () => {
   9 |   test.beforeEach(async ({ page }) => {
  10 |     // 1. Login first
  11 |     const loginPage = new LoginPage(page);
  12 |     await loginPage.navigateToLogin();
  13 |     await loginPage.login(
  14 |       config.users.valid.username,
  15 |       config.users.valid.password
  16 |     );
  17 |
  18 |     // 2. Clear cart while authenticated
  19 |     const cartPage = new CartPage(page);
  20 |     await page.goto("/cart");
  21 |
  22 |     // Only empty if items exist
  23 |     if ((await cartPage.getCartItemCount()) > 0) {
  24 |       await cartPage.emptyCart();
  25 |     }
  26 |   });
  27 |
  28 |   test("Complete checkout as logged-in user", async ({ page }) => {
  29 |     const shopPage = new ShopPage(page);
  30 |     const cartPage = new CartPage(page);
  31 |     const checkoutPage = new CheckoutPage(page);
  32 |
  33 |     // 1. Add Product to Cart
  34 |     await shopPage.navigateToProduct(config.products.defaultProduct.slug);
  35 |     await shopPage.selectProductOptions(
  36 |       config.products.defaultProduct.options.size,
  37 |       config.products.defaultProduct.options.color
  38 |     );
  39 |     await shopPage.addToCart();
  40 |
  41 |     // 2. View and Verify Cart
  42 |     await shopPage.viewCart();
> 43 |     await expect(page.locator(config.selectors.cart.cartTotal)).toContainText(
     |                                                                 ^ Error: expect(locator).toContainText(expected)
  44 |       config.products.defaultProduct.options.expectedPrice
  45 |     );
  46 |
  47 |     // 3. Proceed to Checkout
  48 |     await cartPage.proceedToCheckout();
  49 |
  50 |     // 4. Complete Checkout
  51 |     const checkoutSelectors = config.selectors.checkout;
  52 |     const editButton = page.getByRole(
  53 |       checkoutSelectors.editShippingAddress.role,
  54 |       { name: checkoutSelectors.editShippingAddress.name }
  55 |     );
  56 |
  57 |     await checkoutPage.safeClickEditAddress();
  58 |
  59 |     await checkoutPage.ensureBillingFormVisible();
  60 |     await checkoutPage.fillShippingDetails(config.testData.shippingDetails);
  61 |     await checkoutPage.placeOrder();
  62 |
  63 |     // 5. Final Assertions
  64 |     await expect(page).toHaveURL(/order-received/);
  65 |     await expect(
  66 |       page.getByRole("heading", { name: "Order received" })
  67 |     ).toBeVisible();
  68 |   });
  69 | });
  70 |
```