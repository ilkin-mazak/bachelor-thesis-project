# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: E2E Checkout Flow >> Complete checkout as logged-in user
- Location: C:\Users\Ilkin Mazakoghlu\Desktop\final-project\tests\CheckoutFlow.spec.js:31:3

# Error details

```
Error: page.waitForURL: Test timeout of 10000ms exceeded.
=========================== logs ===========================
  "domcontentloaded" event fired
============================================================
    at C:\Users\Ilkin Mazakoghlu\Desktop\final-project\tests\CheckoutFlow.spec.js:52:16
```

# Page snapshot

```yaml
- link "Skip to content"
- banner:
  - banner:
    - paragraph:
      - link "mystore"
- main:
  - form "Checkout"
- status
```

# Test source

```ts
   1 | import { test, expect } from "@playwright/test";
   2 | import LoginPage from "../page-objects/LoginPage.js";
   3 | import ShopPage from "../page-objects/ShopPage.js";
   4 | import CartPage from "../page-objects/CartPage.js";
   5 | import CheckoutPage from "../page-objects/CheckoutPage.js";
   6 | import config from "../config/site-config.json" assert { type: "json" };
   7 |
   8 | test.describe("E2E Checkout Flow", () => {
   9 |   test.beforeEach(async ({ page }) => {
  10 |     const loginPage = new LoginPage(page);
  11 |     const cartPage = new CartPage(page);
  12 |
  13 |     // 1. Login and clear cart
  14 |     await loginPage.navigateToLogin();
  15 |     await loginPage.login(
  16 |       config.users.valid.username,
  17 |       config.users.valid.password
  18 |     );
  19 |
  20 |     // 2. Clear cart with retries
  21 |     await page.goto("/cart");
  22 |     const cartCount = await cartPage.getCartItemCount();
  23 |     if (cartCount > 0) {
  24 |       await cartPage.emptyCart();
  25 |       await expect(async () => {
  26 |         expect(await cartPage.getCartItemCount()).toBe(0);
  27 |       }).toPass({ timeout: 10000 });
  28 |     }
  29 |   });
  30 |
  31 |   test("Complete checkout as logged-in user", async ({ page }) => {
  32 |     const shopPage = new ShopPage(page);
  33 |     const cartPage = new CartPage(page);
  34 |     const checkoutPage = new CheckoutPage(page);
  35 |
  36 |     // 1. Add product to cart
  37 |     await shopPage.navigateToProduct(config.products.defaultProduct.slug);
  38 |     await shopPage.selectProductOptions(
  39 |       config.products.defaultProduct.options.size,
  40 |       config.products.defaultProduct.options.color
  41 |     );
  42 |     await shopPage.addToCart();
  43 |
  44 |     // 2. Verify cart
  45 |     await shopPage.viewCart();
  46 |     await expect(page.locator(config.selectors.cart.cartTotal)).toContainText(
  47 |       config.products.defaultProduct.options.expectedPrice
  48 |     );
  49 |
  50 |     // 3. Proceed to checkout
  51 |     await cartPage.proceedToCheckout();
> 52 |     await page.waitForURL(/checkout/);
     |                ^ Error: page.waitForURL: Test timeout of 10000ms exceeded.
  53 |
  54 |     // 4. Handle address form
  55 |     await checkoutPage.safeClickEditAddress();
  56 |     await checkoutPage.fillShippingDetails(config.testData.shippingDetails);
  57 |
  58 |     // 5. Place order
  59 |     await checkoutPage.placeOrder();
  60 |
  61 |     // 6. Verify success
  62 |     await expect(page).toHaveURL(/order-received/);
  63 |     const confirmationHeading =
  64 |       await checkoutPage.getOrderConfirmationHeading();
  65 |     await expect(confirmationHeading).toBeVisible({ timeout: 15000 });
  66 |   });
  67 | });
  68 |
```