# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: E2E Checkout Flow >> Complete checkout as logged-in user
- Location: C:\Users\Ilkin Mazakoghlu\Desktop\final-project\tests\CheckoutFlow.spec.ts:29:3

# Error details

```
Error: expect(locator).toBeVisible()

Locator: getByRole('heading', { name: 'Order received' })
Expected: visible
Received: <element(s) not found>
Call log:
  - expect.toBeVisible with timeout 10000ms
  - waiting for getByRole('heading', { name: 'Order received' })
    - waiting for" http://mystore.local/checkout/order-received/1519/?key=wc_order_YFqM8V2KQa637" navigation to finish...
    - navigated to "http://mystore.local/checkout/order-received/1519/?key=wc_order_YFqM8V2KQa637"

    at C:\Users\Ilkin Mazakoghlu\Desktop\final-project\tests\CheckoutFlow.spec.ts:69:7
```

# Page snapshot

```yaml
- link "Skip to content"
- banner:
  - paragraph:
    - link "mystore"
  - navigation:
    - list:
      - listitem:
        - link "Home"
      - listitem:
        - link "Shop"
      - listitem:
        - link "Cart"
      - listitem:
        - link "My account"
      - listitem:
        - link "Contact us"
- main:
  - heading "Order received" [level=1]
  - paragraph: Thank you. Your order has been received.
  - list:
    - listitem: "Order #: 1519"
    - listitem: "Date: March 19, 2025"
    - listitem: "Total: 69,00 €"
    - listitem: "Email: email1@email.com"
    - listitem: "Payment: Cash on delivery"
  - heading "Order details" [level=2]
  - table:
    - rowgroup:
      - row "Product Total":
        - cell "Product"
        - cell "Total"
    - rowgroup:
      - 'row "Abominable Hoodie – S, Green × 1 Size: S Color: Green 69,00 €"':
        - 'cell "Abominable Hoodie – S, Green × 1 Size: S Color: Green"':
          - link "Abominable Hoodie – S, Green"
          - strong: × 1
          - list:
            - listitem:
              - strong: "Size:"
              - paragraph: S
            - listitem:
              - strong: "Color:"
              - paragraph: Green
        - cell "69,00 €"
    - rowgroup:
      - 'row "Shipping: Free shipping"':
        - rowheader "Shipping:"
        - cell "Free shipping"
      - 'row "Total: 69,00 €"':
        - rowheader "Total:"
        - cell "69,00 €"
  - heading "Shipping address" [level=2]
  - text: John Doe 123 Main St Vilnius wrth 01234
  - heading "Billing address" [level=2]
  - text: John Doe 123 Main St Vilnius wrth 01234
  - paragraph: Pay with cash upon delivery.
- contentinfo:
  - paragraph:
    - link "mystore"
  - paragraph:
    - text: Proudly powered by
    - link "WordPress"
- status
```

# Test source

```ts
   1 | //CheckoutFlow.spec.ts
   2 | import { test, expect } from "@playwright/test";
   3 | import LoginPage from "../page-objects/LoginPage.js";
   4 | import ShopPage from "../page-objects/ShopPage.js";
   5 | import CartPage from "../page-objects/CartPage.js";
   6 | import CheckoutPage from "../page-objects/CheckoutPage.js";
   7 | import config from "../config/site-config.json" with { type: "json" };
   8 |
   9 | test.describe("E2E Checkout Flow", () => {
  10 |   test.beforeEach(async ({ page }) => {
  11 |     // 1. Login first
  12 |     const loginPage = new LoginPage(page);
  13 |     await loginPage.navigateToLogin();
  14 |     await loginPage.login(
  15 |       config.users.valid.username,
  16 |       config.users.valid.password
  17 |     );
  18 |
  19 |     // 2. Clear cart while authenticated
  20 |     const cartPage = new CartPage(page);
  21 |     await page.goto("/cart");
  22 |
  23 |     // Only empty if items exist
  24 |     if ((await cartPage.getCartItemCount()) > 0) {
  25 |       await cartPage.emptyCart();
  26 |     }
  27 |   });
  28 |
  29 |   test("Complete checkout as logged-in user", async ({ page }) => {
  30 |     const shopPage = new ShopPage(page);
  31 |     const cartPage = new CartPage(page);
  32 |     const checkoutPage = new CheckoutPage(page);
  33 |
  34 |     // 1. Add Product to Cart
  35 |     await shopPage.navigateToProduct(config.products.defaultProduct.slug);
  36 |     await shopPage.selectProductOptions(
  37 |       config.products.defaultProduct.options.size,
  38 |       config.products.defaultProduct.options.color
  39 |     );
  40 |     await shopPage.addToCart();
  41 |
  42 |     // 2. View and Verify Cart
  43 |     await shopPage.viewCart();
  44 |     await expect(page.locator(config.selectors.cart.cartTotal)).toContainText(
  45 |       config.products.defaultProduct.options.expectedPrice
  46 |     );
  47 |
  48 |     // 3. Proceed to Checkout
  49 |     await cartPage.proceedToCheckout();
  50 |
  51 |     // 4. Complete Checkout
  52 |     await page.waitForURL(/checkout/); // Wait for checkout page to load
  53 |
  54 |     await checkoutPage.safeClickEditAddress();
  55 |
  56 |     await checkoutPage.ensureBillingFormVisible();
  57 |     await checkoutPage.fillShippingDetails(config.testData.shippingDetails);
  58 |     await checkoutPage.placeOrder();
  59 |
  60 |     // Firefox-specific stabilization
  61 |     if ((await page.context().browser()?.browserType().name()) === "firefox") {
  62 |       await page.waitForLoadState("networkidle");
  63 |       await page.waitForTimeout(1000); // Allow final render
  64 |     }
  65 |
  66 |     // 5. Final Assertions
  67 |     await expect(
  68 |       page.getByRole("heading", { name: "Order received" })
> 69 |     ).toBeVisible({ timeout: 10000 }); // Wait up to 10 seconds
     |       ^ Error: expect(locator).toBeVisible()
  70 |     await expect(page).toHaveURL(/order-received/);
  71 |     await expect(
  72 |       page.getByRole(
  73 |         config.selectors.checkout.orderReceivedHeading.role as "heading", 
  74 |         { name: config.selectors.checkout.orderReceivedHeading.name }
  75 |       )
  76 |     ).toBeVisible();
  77 |   });
  78 | });
  79 |
```