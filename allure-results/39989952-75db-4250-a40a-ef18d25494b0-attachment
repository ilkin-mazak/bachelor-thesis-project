# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: E2E Checkout Flow >> Complete checkout as logged-in user
- Location: C:\Users\Ilkin Mazakoghlu\Desktop\final-project\tests\CheckoutFlow.spec.js:28:3

# Error details

```
Error: page.waitForURL: Test timeout of 10000ms exceeded.
=========================== logs ===========================
  "domcontentloaded" event fired
  "load" event fired
============================================================
    at CartPage.proceedToCheckout (C:\Users\Ilkin Mazakoghlu\Desktop\final-project\page-objects\CartPage.js:41:21)
    at C:\Users\Ilkin Mazakoghlu\Desktop\final-project\tests\CheckoutFlow.spec.js:48:5
```

# Page snapshot

```yaml
- link "Skip to content"
- banner:
  - banner:
    - paragraph:
      - link "mystore"
- main:
  - form "Checkout":
    - group "Contact information":
      - text: Contact information
      - heading "Contact information" [level=2]
      - paragraph: We'll use this email to send you details and updates about your order.
      - textbox "Email address": email1@email.com
      - text: Email address
    - group "Shipping address":
      - text: Shipping address
      - heading "Shipping address" [level=2]
      - paragraph: Enter the address where you want your order delivered.
      - text: John Doe 123 Main St, Vilnius, wrth, 01234, Lithuania
      - button "Edit shipping address": Edit
      - checkbox "Use same address for billing" [checked]
      - text: Use same address for billing
    - group "Shipping options":
      - text: Shipping options
      - heading "Shipping options" [level=2]
      - radio "Free shipping Free" [checked]
      - text: Free shipping Free
    - group "Payment options":
      - text: Payment options
      - heading "Payment options" [level=2]
      - text: Cash on delivery Pay with cash upon delivery.
    - checkbox "Add a note to your order"
    - text: Add a note to your order By proceeding with your purchase you agree to our
    - link "Terms and Conditions"
    - text: and Privacy Policy
    - link "Return to Cart"
    - button "Place Order"
  - heading "Order summary"
  - text: 1 item
  - img "Abominable Hoodie"
  - heading "Abominable Hoodie" [level=3]
  - text: 69,00 €
  - paragraph: It took CoolTech™ weather apparel know-how and lots of wind-resistant fabric to get the Abominable…
  - list:
    - listitem: "Size: S"
    - listitem: "Color: Green"
  - text: "Total price for 1 Abominable Hoodie item: 69,00 €"
  - heading "Add a coupon" [level=2]:
    - button "Add a coupon"
  - text: Subtotal 69,00 € Delivery
  - strong: Free
  - text: Free shipping Total 69,00 €
- paragraph: Notifications
- text: 1 shipping option was found.
- status
```

# Test source

```ts
   1 | import config from "../config/site-config.json" assert { type: "json" };
   2 |
   3 | export default class CartPage {
   4 |   constructor(page) {
   5 |     this.page = page;
   6 |     this.selectors = config.selectors.cart;
   7 |   }
   8 |
   9 |   // async proceedToCheckout() {
  10 |   //   await this.page.locator(this.selectors.proceedToCheckout).click();
  11 |   // }
  12 |
  13 |   async proceedToCheckout() {
  14 |     const btn = this.page.locator(this.selectors.proceedToCheckout);
  15 |
  16 |     // WebKit-specific handling
  17 |     if (this.page.context().browser().browserType().name() === "webkit") {
  18 |       // 1. Force scroll into view
  19 |       await btn.evaluate((element) => {
  20 |         element.scrollIntoView({ behavior: "instant", block: "center" });
  21 |       });
  22 |
  23 |       // 2. Wait for actionable state
  24 |       await btn.waitFor({
  25 |         state: "attached",
  26 |         timeout: 15000,
  27 |       });
  28 |
  29 |       // 3. Force click with retries
  30 |       await btn.click({
  31 |         force: true,
  32 |         noWaitAfter: true,
  33 |         timeout: 5000,
  34 |       });
  35 |     } else {
  36 |       // Standard handling for Chromium/Firefox
  37 |       await btn.click();
  38 |     }
  39 |
  40 |     // 4. Universal navigation wait
> 41 |     await this.page.waitForURL(/checkout/, {
     |                     ^ Error: page.waitForURL: Test timeout of 10000ms exceeded.
  42 |       waitUntil: "networkidle",
  43 |       timeout: 5000,
  44 |     });
  45 |   }
  46 |
  47 |   async getCartTotal() {
  48 |     return await this.page.locator(this.selectors.cartTotal).textContent();
  49 |   }
  50 |
  51 |   async emptyCart() {
  52 |     const removeButtons = await this.page
  53 |       .locator(this.selectors.removeItemButton)
  54 |       .all();
  55 |
  56 |     // Remove items from last to first to avoid DOM changes affecting indexes
  57 |     for (let i = removeButtons.length - 1; i >= 0; i--) {
  58 |       await removeButtons[i].click();
  59 |       // Wait for the cart item to disappear
  60 |       await this.page.waitForSelector(this.selectors.removeItemButton, {
  61 |         state: "detached", // Waits until the element is removed from DOM
  62 |         timeout: 5000, // 5 seconds max
  63 |       });
  64 |     }
  65 |   }
  66 |
  67 |   async getCartItemCount() {
  68 |     return await this.page.locator(".wc-block-components-product-name").count();
  69 |   }
  70 | }
  71 |
```